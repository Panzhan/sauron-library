/**
 * 获取小数位长度
 *
 * @param num 数字
 */
function getDecimalLength(num) {
  try {
    return num.toString().split('.')[1].length;
  } catch (e) {
    return 0;
  }
}
/**
 * 判断是否是数字
 *
 * 举例：
 * isNumber(1) // true
 * isNumber('1') // true
 * ---------------------
 * isNumber() // false
 * isNumber('') // false
 * isNumber(true) // false
 * isNumber(null) // false
 * isNumber(NaN) // false
 * isNumber('1px') // false
 *
 * @param num 数字
 */


function isNumber(num) {
  return !Number.isNaN(Number(num)) && !Number.isNaN(Number.parseFloat(num));
}
/**
 * 包装函数
 *
 * @param n1 数值1
 * @param n2 数值2
 * @param handler 处理函数
 * @throws {TypeError}
 */


function layer(n1, n2, handler) {
  if (!isNumber(n1)) {
    throw new TypeError('The first parameter is not a number');
  }

  if (typeof n2 === 'undefined') {
    return Number(n1);
  }

  if (!isNumber(n2)) {
    throw new TypeError('The second parameter is not a number');
  }

  return handler(Number(n1), Number(n2));
}
/**
 * 乘法运算
 *
 * @param n1 被乘数
 * @param n2 乘数
 */


function _multiply(n1, n2) {
  var l1 = getDecimalLength(n1);
  var l2 = getDecimalLength(n2);
  var s1 = n1.toString();
  var s2 = n2.toString();
  var m = Math.pow(10, l1 + l2);
  return Number(s1.replace('.', '')) * Number(s2.replace('.', '')) / m;
}
/**
 * 除法运算
 *
 * @param n1 被除数
 * @param n2 除数
 */


function _division(n1, n2) {
  var l1 = getDecimalLength(n1);
  var l2 = getDecimalLength(n2);
  var s1 = n1.toString();
  var s2 = n2.toString();
  var m = Math.pow(10, l2 - l1);
  return _multiply(Number(s1.replace('.', '')) / Number(s2.replace('.', '')), m);
}
/**
 * 加法运算
 *
 * @param n1 被加数
 * @param n2 加数
 */


function _add(n1, n2) {
  var l1 = getDecimalLength(n1);
  var l2 = getDecimalLength(n2);
  var m = Math.pow(10, Math.max(l1, l2));
  return (_multiply(n1, m) + _multiply(n2, m)) / m;
}
/**
 * 减法运算
 *
 * @param n1 被减数
 * @param n2 减数
 */


function _minus(n1, n2) {
  var l1 = getDecimalLength(n1);
  var l2 = getDecimalLength(n2);
  var m = Math.pow(10, Math.max(l1, l2));
  return (_multiply(n1, m) - _multiply(n2, m)) / m;
}

var add = function add(n1, n2) {
  return layer(n1, n2, _add);
};
var minus = function minus(n1, n2) {
  return layer(n1, n2, _minus);
};
var multiply = function multiply(n1, n2) {
  return layer(n1, n2, _multiply);
};
var division = function division(n1, n2) {
  return layer(n1, n2, _division);
};

export { add, division, minus, multiply };
//# sourceMappingURL=accurate.esm.js.map
